trigger:
- dev

pool:
  vmImage: 'ubuntu-latest'

variables:
  REPO_NAME: 'exam'
  IMAGE_TAG: '$(Build.BuildNumber)'
  DOCKER_USER: 'jonathanmradai'
  DOCKERHUB_CREDENTIALS_PSW: '$(yonatantoken)' # Define this as a secret variable in Azure
  AWS_ACCESS_KEY_ID: $(AWS_ACCESS_KEY_ID)
  AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)

stages:
- stage: BuildAndTest
  jobs:
  - job: BuildTestPush
    steps:
    - script: |
        # Check if Docker is installed
        docker --version || { echo "Docker not found, installing..."; sudo apt-get update && sudo apt-get install -y docker.io; }
        # Check if Docker Compose is installed
        docker compose version || { echo "Docker Compose not found, installing..."; sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose && sudo chmod +x /usr/local/bin/docker-compose; }
        # Verify installations
        docker --version
        docker compose version
      displayName: 'Ensure Docker and Docker Compose are installed'

    - checkout: self
      submodules: true
      persistCredentials: true

    - script: |
        cd fp_docker
        pip install flake8
        flake8 . || true
      displayName: 'Lint'

    - script: |
        cd fp_docker
        pip install bandit
        bandit -r . || true
      displayName: 'Security Scan'

    - script: |
        cd fp_docker
        pip install -r requirements.txt
      displayName: 'Install Dependencies'

    - script: |
        cd fp_docker
        docker build -t $(DOCKER_USER)/$(REPO_NAME):$(Build.BuildNumber) . --no-cache
        docker tag $(DOCKER_USER)/$(REPO_NAME):$(Build.BuildNumber) $(DOCKER_USER)/$(REPO_NAME):latest
      displayName: 'Build Docker Image'

    - script: |
        docker run -d --name $REPO_NAME -p 5001:5001 --init $(DOCKER_USER)/$(REPO_NAME):$(Build.BuildNumber) --env AWS_ACCESS_KEY_ID=$(AWS_ACCESS_KEY_ID) --env AWS_SECRET_ACCESS_KEY=$(AWS_SECRET_ACCESS_KEY)
        SERVER_URL="http://172.17.0.1:5001"
        sleep 20
        curl $SERVER_URL
        docker stop $REPO_NAME
        docker rm $REPO_NAME
      displayName: 'Fetch From Container Test'
      
    - script: |
        echo "$(DOCKERHUB_CREDENTIALS_PSW)" | docker login -u $(DOCKER_USER) --password-stdin
        docker push $(DOCKER_USER)/$(REPO_NAME):$(Build.BuildNumber)
        docker push $(DOCKER_USER)/$(REPO_NAME):latest
      displayName: 'Push to Docker Hub'